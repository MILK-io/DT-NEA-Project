#include <Wire.h>                  // Includes the Wire library for I2C communication
#include <LiquidCrystal_I2C.h>      // Includes library for controlling I2C LCD displays

// Initialize the LCD interfaces with their I2C addresses - 20x4 dimensions
// Creates 5 LCD objects - one for questions and 4 for answer choices
// Parameters: I2C address, columns (20), rows (4)
LiquidCrystal_I2C questionLCD(0x27, 20, 4);  // Question display (address 0x27)
LiquidCrystal_I2C answerLCD1(0x26, 20, 4);   // Answer A display (address 0x26)
LiquidCrystal_I2C answerLCD2(0x25, 20, 4);   // Answer B display (address 0x25)
LiquidCrystal_I2C answerLCD3(0x24, 20, 4);   // Answer C display (address 0x24)
LiquidCrystal_I2C answerLCD4(0x23, 20, 4);   // Answer D display (address 0x23)

// Button pins
// Defines which Arduino pins are connected to the physical buttons
const int questionButtonPin = 2;    // Pin for game control button
const int answer1ButtonPin = 3;     // Pin for Answer A button
const int answer2ButtonPin = 4;     // Pin for Answer B button
const int answer3ButtonPin = 5;     // Pin for Answer C button
const int answer4ButtonPin = 6;     // Pin for Answer D button

// Variables for button states
// Tracks the previous state of each button (HIGH = not pressed)
int lastQuestionButtonState = HIGH;
int lastAnswer1ButtonState = HIGH;
int lastAnswer2ButtonState = HIGH;
int lastAnswer3ButtonState = HIGH;
int lastAnswer4ButtonState = HIGH;

// Variables for debouncing
// Prevents registering multiple presses from button bounce
unsigned long lastDebounceTime = 0;    // Timestamp of last button state change
unsigned long debounceDelay = 50;      // Wait 50ms to confirm button press

// Variables for double-click detection
// Used to detect when question button is double-clicked
unsigned long lastClickTime = 0;                  // When the last click happened
const unsigned long doubleClickTime = 300;        // 300ms window for double-click
bool singleClickPending = false;                  // Waiting for possible second click

// Game variables
// Tracks the current game state
int score = 0;                        // Player's score starts at 0
int currentQuestionType = 0;          // 0: Maths, 1: Science, 2: Geography
int currentDifficulty = 0;            // 0: Ages 4-6, 1: Ages 7-9, 2: Ages 10-12
int currentQuestionIndex = 0;         // Current question number in the array

// Constants for types and difficulties
// Defines available categories and difficulty levels
const int NUM_QUESTION_TYPES = 3;
const int NUM_DIFFICULTY_LEVELS = 3;
String questionTypes[3] = {"MATHS", "SCIENCE", "GEOGRAPHY"};        // Names of categories
String difficultyLevels[3] = {"Ages 4-6", "Ages 7-9", "Ages 10-12"};// Names of difficulty levels

// Display status variables
// Controls the temporary status screen display
unsigned long statusDisplayStartTime = 0;             // When status screen appeared
const unsigned long statusDisplayDuration = 5000;     // Show status for 5 seconds
bool showingStatus = false;                           // Is status screen currently shown

// Define questions and answers with difficulty levels
// Custom data structure for quiz questions
struct Question {
 String question;              // Question text (can include \n for line break)
 String answers[4];            // Array of 4 possible answers
 int correctAnswer;            // Index (0-3) of the correct answer
};

// Math questions - Difficulty level 1 (Ages 4-6)
// Array of 5 easy math questions
Question mathQuestions_easy[] = {
 {"How many fingers do\nyou have on one hand?", {"3", "4", "5", "10"}, 2},  // Answer: 5 (index 2)
 {"What comes after 3?", {"2", "4", "5", "6"}, 1},                          // Answer: 4 (index 1)
 {"1 + 1 = ?", {"1", "2", "3", "4"}, 1},                                    // Answer: 2 (index 1)  
 {"Which shape has\n3 sides?", {"Circle", "Square", "Triangle", "Rectangle"}, 2}, // Answer: Triangle (index 2)
 {"Count: 2, 4, 6, ?", {"7", "8", "9", "10"}, 1}                            // Answer: 8 (index 1)
};

// Math questions - Difficulty level 2 (Ages 7-9)
// Array of 5 medium math questions
Question mathQuestions_medium[] = {
 {"What is 5 + 7?", {"10", "11", "12", "13"}, 2},                           // Answer: 12 (index 2)
 {"9 x 3 = ?", {"18", "21", "27", "30"}, 3},                                // Answer: 27 (index 3)
 {"Half of 16 is?", {"4", "6", "8", "10"}, 2},                              // Answer: 8 (index 2)
 {"10 - 4 + 2 = ?", {"4", "6", "8", "12"}, 2},                              // Answer: 8 (index 2)
 {"How many minutes in\n2 hours?", {"60", "100", "120", "240"}, 2}          // Answer: 120 (index 2)
};

// Math questions - Difficulty level 3 (Ages 10-12)
// Array of 5 hard math questions
Question mathQuestions_hard[] = {
 {"What is 12 x 8?", {"86", "96", "92", "108"}, 1},                         // Answer: 96 (index 1)
 {"Calculate: 45 / 9", {"4", "5", "6", "9"}, 1},                            // Answer: 5 (index 1)
 {"What is 3^3 (3 cubed)?", {"9", "18", "21", "27"}, 3},                    // Answer: 27 (index 3)
 {"If x + 15 = 23,\nwhat is x?", {"7", "8", "13", "38"}, 1},                // Answer: 8 (index 1)
 {"A rectangle is 4cm by\n6cm. Area = ?", {"10cm²", "12cm²", "20cm²", "24cm²"}, 3} // Answer: 24cm² (index 3)
};

// Science questions - Difficulty level 1 (Ages 4-6)
// Array of 5 easy science questions
Question scienceQuestions_easy[] = {
 {"What color is the sky\non a sunny day?", {"Blue", "Green", "Yellow", "Red"}, 0}, // Answer: Blue (index 0)
 {"What do plants need\nto grow?", {"Candy", "Water", "Toys", "Cars"}, 1},          // Answer: Water (index 1)
 {"Which animal barks?", {"Cat", "Bird", "Dog", "Fish"}, 2},                        // Answer: Dog (index 2)
 {"How many legs does\na spider have?", {"4", "6", "8", "10"}, 2},                  // Answer: 8 (index 2)
 {"Sun rises in the?", {"North", "South", "East", "West"}, 2}                       // Answer: East (index 2)
};

// Science questions - Difficulty level 2 (Ages 7-9)
// Array of 5 medium science questions
Question scienceQuestions_medium[] = {
 {"Which is not a\nseason?", {"Summer", "Winter", "Autumn", "Monday"}, 3},          // Answer: Monday (index 3)
 {"What do plants make\nusing sunlight?", {"Oxygen", "Water", "Food", "Soil"}, 2},  // Answer: Food (index 2)
 {"What is Earth's\nnatural satellite?", {"Sun", "Moon", "Mars", "Star"}, 1},       // Answer: Moon (index 1)
 {"Humans breathe in?", {"Oxygen", "Carbon Dioxide", "Nitrogen", "Hydrogen"}, 0},   // Answer: Oxygen (index 0)
 {"What is the largest\nanimal?", {"Elephant", "Blue Whale", "Giraffe", "Shark"}, 1} // Answer: Blue Whale (index 1)
};

// Science questions - Difficulty level 3 (Ages 10-12)
// Array of 5 hard science questions
Question scienceQuestions_hard[] = {
 {"What is H2O?", {"Hydrogen", "Oxygen", "Water", "Air"}, 2},                        // Answer: Water (index 2)
 {"Which planet has\nrings?", {"Earth", "Mars", "Jupiter", "Saturn"}, 3},            // Answer: Saturn (index 3)
 {"What is the hardest\nnatural substance?", {"Steel", "Stone", "Diamond", "Iron"}, 2}, // Answer: Diamond (index 2)
 {"Which element has\natomic number 1?", {"Carbon", "Oxygen", "Helium", "Hydrogen"}, 3}, // Answer: Hydrogen (index 3)
 {"What causes tides\non Earth?", {"Wind", "Rain", "Moon's gravity", "Sun's heat"}, 2}   // Answer: Moon's gravity (index 2)
};

// Geography questions - Difficulty level 1 (Ages 4-6)
// Array of 5 easy geography questions
Question geoQuestions_easy[] = {
 {"Where do fish live?", {"Trees", "Sky", "Water", "Mountains"}, 2},                // Answer: Water (index 2)
 {"What shape is the\nEarth?", {"Flat", "Square", "Round", "Triangle"}, 2},         // Answer: Round (index 2)
 {"Which is not a\ncolor on a rainbow?", {"Red", "Purple", "Brown", "Green"}, 2},   // Answer: Brown (index 2)
 {"What animal lives in\nthe North Pole?", {"Penguin", "Polar Bear", "Lion", "Monkey"}, 1}, // Answer: Polar Bear (index 1)
 {"What do we need when\nit rains?", {"Sunglasses", "Umbrella", "Fan", "Hat"}, 1}   // Answer: Umbrella (index 1)
};

// Geography questions - Difficulty level 2 (Ages 7-9)
// Array of 5 medium geography questions
Question geoQuestions_medium[] = {
 {"What is the largest\nocean?", {"Atlantic", "Pacific", "Arctic", "Indian"}, 1},   // Answer: Pacific (index 1)
 {"Which country has\nthe Eiffel Tower?", {"USA", "England", "France", "Italy"}, 2}, // Answer: France (index 2)
 {"How many continents\nare there?", {"5", "6", "7", "8"}, 2},                      // Answer: 7 (index 2)
 {"Which direction does\nthe sun set?", {"North", "East", "South", "West"}, 3},      // Answer: West (index 3)
 {"What is the capital\nof England?", {"Paris", "Madrid", "London", "Rome"}, 2}      // Answer: London (index 2)
};

// Geography questions - Difficulty level 3 (Ages 10-12)
// Array of 5 hard geography questions
Question geoQuestions_hard[] = {
 {"What is the largest\ncountry by area?", {"China", "USA", "Canada", "Russia"}, 3}, // Answer: Russia (index 3)
 {"On which continent is\nEgypt?", {"Asia", "Africa", "Europe", "Australia"}, 1},    // Answer: Africa (index 1)
 {"What is the longest\nriver in the world?", {"Amazon", "Nile", "Yangtze", "Mississippi"}, 1}, // Answer: Nile (index 1)
 {"Which city is known as\nthe 'Big Apple'?", {"Paris", "Tokyo", "New York", "London"}, 2}, // Answer: New York (index 2)
 {"What is the driest\ndesert on Earth?", {"Sahara", "Gobi", "Atacama", "Kalahari"}, 2} // Answer: Atacama (index 2)
};

void setup() {
 // Initialize I2C bus
 Wire.begin();                    // Start I2C communication

 // Initialize serial for debugging (optional)
 Serial.begin(9600);              // Open serial port at 9600 baud rate
 Serial.println("Quiz Game Starting..."); // Print startup message to serial monitor

 // Initialize LCDs
 // Prepare all LCD displays for use
 questionLCD.init();
 answerLCD1.init();
 answerLCD2.init();
 answerLCD3.init();
 answerLCD4.init();

 // Turn on the backlight for all LCDs
 // Makes the displays visible
 questionLCD.backlight();
 answerLCD1.backlight();
 answerLCD2.backlight();
 answerLCD3.backlight();
 answerLCD4.backlight();

 // Initialize button pins
 // Sets up the button pins as inputs with internal pull-up resistors
 // (HIGH when not pressed, LOW when pressed)
 pinMode(questionButtonPin, INPUT_PULLUP);
 pinMode(answer1ButtonPin, INPUT_PULLUP);
 pinMode(answer2ButtonPin, INPUT_PULLUP);
 pinMode(answer3ButtonPin, INPUT_PULLUP);
 pinMode(answer4ButtonPin, INPUT_PULLUP);

 // Display welcome message
 showWelcomeScreen();             // Show instructions on how to use the game
 delay(3000);                     // Wait 3 seconds so user can read instructions

 // Show initial status screen
 showStatusScreen();              // Display game status (topic, level, score)
 statusDisplayStartTime = millis(); // Record when status screen appeared
 showingStatus = true;            // Mark that we're showing status screen
}

void loop() {
 // Check if status screen needs to be hidden
 // If status screen has been shown for 5 seconds, show a question
 if (showingStatus && (millis() - statusDisplayStartTime >= statusDisplayDuration)) {
   showingStatus = false;         // Stop showing status screen
   displayCurrentQuestion();      // Show a question instead
 }

 // Handle the question button with combination presses for difficulty change
 // Read the current state of the question button
 int questionButtonReading = digitalRead(questionButtonPin);

 // Check if any answer button is held while question button is pressed (for difficulty change)
 // This is a special combination to change difficulty level
 if (questionButtonReading == LOW) {  // If question button is pressed
   if (digitalRead(answer1ButtonPin) == LOW ||
       digitalRead(answer2ButtonPin) == LOW ||
       digitalRead(answer3ButtonPin) == LOW ||
       digitalRead(answer4ButtonPin) == LOW) {  // And any answer button is pressed

     // Change difficulty level
     currentDifficulty = (currentDifficulty + 1) % NUM_DIFFICULTY_LEVELS; // Cycle through difficulties
     currentQuestionIndex = 0;    // Reset to first question of new difficulty

     // Show status screen
     showStatusScreen();          // Update the display with new difficulty
     statusDisplayStartTime = millis(); // Reset status screen timer
     showingStatus = true;        // Mark that we're showing status screen

     // Wait for button release
     // Prevents multiple changes while button is held down
     while (digitalRead(questionButtonPin) == LOW) {
       delay(10);                 // Small delay to prevent CPU hogging
     }
   }
 }

 // If question button state changed
 // Part of the debounce logic
 if (questionButtonReading != lastQuestionButtonState) {
   lastDebounceTime = millis();   // Reset the debounce timer
 }

 if ((millis() - lastDebounceTime) > debounceDelay) {
   // If the button state has changed and is now pressed
   // If enough time has passed to consider it a valid press
   if (questionButtonReading == LOW && lastQuestionButtonState == HIGH) {
     // Button was just pressed (without answer buttons held)
     if (singleClickPending) {
       // Double-click detected - change question type
       if (millis() - lastClickTime < doubleClickTime) {
         currentQuestionType = (currentQuestionType + 1) % NUM_QUESTION_TYPES; // Cycle through topics
         currentQuestionIndex = 0; // Reset to first question of new topic

         // Show status screen
         showStatusScreen();      // Update display with new topic
         statusDisplayStartTime = millis(); // Reset status screen timer
         showingStatus = true;    // Mark that we're showing status screen

         singleClickPending = false; // Reset double-click detection
       }
     } else {
       // First click
       lastClickTime = millis();  // Record when first click happened
       singleClickPending = true; // Wait for possible second click
     }
   }
 }

 // Check if single click timeout has occurred
 // If enough time passes after a single click without a second click
 if (singleClickPending && (millis() - lastClickTime > doubleClickTime)) {
   // Single click action - reset the score
   score = 0;                     // Clear player's score

   // Show status screen
   showStatusScreen();            // Update display with reset score
   statusDisplayStartTime = millis(); // Reset status screen timer  
   showingStatus = true;          // Mark that we're showing status screen

   singleClickPending = false;    // Reset click detection
 }

 lastQuestionButtonState = questionButtonReading; // Save button state for next loop

 // Only handle answer buttons if not showing status screen
 // Don't process answers during status display
 if (!showingStatus) {
   // Handle answer buttons
   // Check each answer button for presses
   checkAnswerButton(answer1ButtonPin, lastAnswer1ButtonState, 0); // Button A
   checkAnswerButton(answer2ButtonPin, lastAnswer2ButtonState, 1); // Button B
   checkAnswerButton(answer3ButtonPin, lastAnswer3ButtonState, 2); // Button C
   checkAnswerButton(answer4ButtonPin, lastAnswer4ButtonState, 3); // Button D
 }
}

void showWelcomeScreen() {
 // Displays game instructions on the question LCD
 questionLCD.clear();                         // Clear the display
 questionLCD.setCursor(0, 0);                 // Position at top left
 questionLCD.print("**** QUIZ GAME ****");    // Title
 questionLCD.setCursor(0, 1);                 // Second line
 questionLCD.print("Single click: Reset");    // Reset score instruction
 questionLCD.setCursor(0, 2);                 // Third line
 questionLCD.print("Double click: Topic");    // Change topic instruction
 questionLCD.setCursor(0, 3);                 // Fourth line
 questionLCD.print("Btn+Q: Change Age");      // Change difficulty instruction

 // Initialize answer displays with category info
 // Label each answer LCD
 answerLCD1.clear();
 answerLCD1.setCursor(0, 0);
 answerLCD1.print("*** OPTION A ***");

 answerLCD2.clear();
 answerLCD2.setCursor(0, 0);
 answerLCD2.print("*** OPTION B ***");

 answerLCD3.clear();
 answerLCD3.setCursor(0, 0);
 answerLCD3.print("*** OPTION C ***");

 answerLCD4.clear();
 answerLCD4.setCursor(0, 0);
 answerLCD4.print("*** OPTION D ***");
}

void showStatusScreen() {
 // Displays the current game status (topic, difficulty, score)
 questionLCD.clear();                         // Clear the display
 questionLCD.setCursor(0, 0);                 // Position at top left
 questionLCD.print("**** STATUS ****");       // Title

 questionLCD.setCursor(0, 1);                 // Second line
 questionLCD.print("Topic: ");                // Label
 questionLCD.print(questionTypes[currentQuestionType]); // Current topic

 questionLCD.setCursor(0, 2);                 // Third line
 questionLCD.print("Level: ");                // Label
 questionLCD.print(difficultyLevels[currentDifficulty]); // Current difficulty

 questionLCD.setCursor(0, 3);                 // Fourth line
 questionLCD.print("Score: ");                // Label
 questionLCD.print(score);                    // Current score
}

void checkAnswerButton(int pin, int &lastState, int answerIndex) {
 // Checks a specific answer button for presses
 int reading = digitalRead(pin);              // Read current button state

 if (reading != lastState) {                  // If button state changed
   lastDebounceTime = millis();               // Reset debounce timer
 }

 if ((millis() - lastDebounceTime) > debounceDelay) {  // If debounce period passed
   if (reading == LOW && lastState == HIGH) {  // If button was just pressed
     // Button was just pressed
     checkAnswer(answerIndex);                // Check if this is the correct answer
   }
 }

 lastState = reading;                         // Save button state for next loop
}

void checkAnswer(int selectedAnswerIndex) {
 // Checks if the selected answer is correct and updates score
 int correctAnswer = getCorrectAnswer();      // Get the current correct answer index

 // Display feedback on the question LCD
 questionLCD.setCursor(0, 3);                 // Position cursor on fourth line
 questionLCD.print("                    ");   // Clear last line
 questionLCD.setCursor(0, 3);                 // Reset cursor position

 // Check if the answer is correct
 if (selectedAnswerIndex == correctAnswer) {
   score += 10;                               // Add 10 points for correct answer
   questionLCD.print("CORRECT! +10 points");  // Show success message
   // Flash the correct answer display to indicate correct answer
   flashDisplay(selectedAnswerIndex, true);   // Visual feedback (flashing)
 } else {
   score = (score > 0) ? score - 5 : 0;       // Subtract 5 points (min 0)
   questionLCD.print("WRONG! -5 points");     // Show failure message
   // Flash the selected display to indicate wrong answer
   flashDisplay(selectedAnswerIndex, false);  // Visual feedback (flashing)
 }

 // Short delay to show the feedback
 delay(1500);                                 // Wait 1.5 seconds

 // Move to the next question
 moveToNextQuestion();                        // Advance to next question
}

int getCorrectAnswer() {
 // Get the correct answer based on the current question type and difficulty
 // Returns the index (0-3) of the correct answer
 switch (currentQuestionType) {
   case 0: // Maths
     switch (currentDifficulty) {
       case 0: return mathQuestions_easy[currentQuestionIndex].correctAnswer;
       case 1: return mathQuestions_medium[currentQuestionIndex].correctAnswer;
       case 2: return mathQuestions_hard[currentQuestionIndex].correctAnswer;
     }
     break;
   case 1: // Science
     switch (currentDifficulty) {
       case 0: return scienceQuestions_easy[currentQuestionIndex].correctAnswer;
       case 1: return scienceQuestions_medium[currentQuestionIndex].correctAnswer;
       case 2: return scienceQuestions_hard[currentQuestionIndex].correctAnswer;
     }
     break;
   case 2: // Geography
     switch (currentDifficulty) {
       case 0: return geoQuestions_easy[currentQuestionIndex].correctAnswer;
       case 1: return geoQuestions_medium[currentQuestionIndex].correctAnswer;
       case 2: return geoQuestions_hard[currentQuestionIndex].correctAnswer;
     }
     break;
 }
 return -1; // Error case
}

void flashDisplay(int displayIndex, bool correct) {
 // Visual feedback for answers - flashes the selected answer LCD
 LiquidCrystal_I2C* targetLCD;              // LCD display to flash

 // Select the correct LCD based on the answer index
 switch (displayIndex) {
   case 0: targetLCD = &answerLCD1; break;  // Answer A
   case 1: targetLCD = &answerLCD2; break;  // Answer B
   case 2: targetLCD = &answerLCD3; break;  // Answer C
   case 3: targetLCD = &answerLCD4; break;  // Answer D
   default: return;                         // Invalid index
 }

 // Flash display 3 times
 for (int i = 0; i < 3; i++) {
   targetLCD->noBacklight();                // Turn backlight off
   delay(100);                              // Wait 100ms
   targetLCD->backlight();                  // Turn backlight on
   delay(100);                              // Wait 100ms
 }
}

void moveToNextQuestion() {
 // Get the number of questions for the current type and difficulty
 int numQuestions = 0;
 switch (currentQuestionType) {
   case 0: // Maths
     numQuestions = 5; // All difficulty levels have 5 questions
     break;
   case 1: // Science
     numQuestions = 5; // All difficulty levels have 5 questions
     break;
   case 2: // Geography
     numQuestions = 5; // All difficulty levels have 5 questions
     break;
 }

 // Move to the next question
 currentQuestionIndex = (currentQuestionIndex + 1) % numQuestions; // Loop back to first question after last

 // Display the new question
 displayCurrentQuestion();                  // Show the next question
}

void displayCurrentQuestion() {
 // Gets the current question and displays it along with answers
 Question* currentQuestion = getCurrentQuestion(); // Get question data

 // Display question with category, difficulty and question number
 questionLCD.clear();                       // Clear the display
 questionLCD.setCursor(0, 0);               // Position at top left
 // Show first 6 chars of question type and first 6 chars of difficulty level
 questionLCD.print(questionTypes[currentQuestionType].substring(0, 6));
 questionLCD.print(" ");
 questionLCD.print(difficultyLevels[currentDifficulty].substring(0, 6));
 questionLCD.print(" S:");
 questionLCD.print(score);                  // Current score

 // Display question text - can use lines 1 and 2 (20 chars each)
 // Find newline if present
 String questionText = currentQuestion->question;
 int newlinePos = questionText.indexOf('\n');

 if (newlinePos != -1) {
   // Split at newline
   questionLCD.setCursor(0, 1);             // Second line
   questionLCD.print(questionText.substring(0, newlinePos)); // First part
   questionLCD.setCursor(0, 2);             // Third line
   questionLCD.print(questionText.substring(newlinePos + 1)); // Second part
 } else {
   // No newline, just show on line 1
   questionLCD.setCursor(0, 1);             // Second line
   questionLCD.print(questionText);         // Entire question on one line
 }

 // Line 3 is left empty for feedback during answering

 // Display answers
 // Shows each answer on its respective LCD
 answerLCD1.clear();
 answerLCD1.setCursor(0, 0);
 answerLCD1.print("********** A **********");
 answerLCD1.setCursor(0, 1);
 answerLCD1.print(currentQuestion->answers[0]); // First answer

 answerLCD2.clear();
 answerLCD2.setCursor(0, 0);
 answerLCD2.print("********** B **********");
 answerLCD2.setCursor(0, 1);
 answerLCD2.print(currentQuestion->answers[1]); // Second answer

 answerLCD3.clear();
 answerLCD3.setCursor(0, 0);
 answerLCD3.print("********** C **********");
 answerLCD3.setCursor(0, 1);
 answerLCD3.print(currentQuestion->answers[2]); // Third answer

 answerLCD4.clear();
 answerLCD4.setCursor(0, 0);
 answerLCD4.print("********** D **********");
 answerLCD4.setCursor(0, 1);
 answerLCD4.print(currentQuestion->answers[3]); // Fourth answer
}

Question* getCurrentQuestion() {
 // Returns a pointer to the current question based on topic and difficulty
 switch (currentQuestionType) {
   case 0: // Maths
     switch (currentDifficulty) {
       case 0: return &mathQuestions_easy[currentQuestionIndex];
       case 1: return &mathQuestions_medium[currentQuestionIndex];
       case 2: return &mathQuestions_hard[currentQuestionIndex];
     }
     break;
   case 1: // Science
     switch (currentDifficulty) {
       case 0: return &scienceQuestions_easy[currentQuestionIndex];
       case 1: return &scienceQuestions_medium[currentQuestionIndex];
       case 2: return &scienceQuestions_hard[currentQuestionIndex];
     }
     break;
   case 2: // Geography
     switch (currentDifficulty) {
       case 0: return &geoQuestions_easy[currentQuestionIndex];
       case 1: return &geoQuestions_medium[currentQuestionIndex];
       case 2: return &geoQuestions_hard[currentQuestionIndex];
     }
     break;
 }

 // Error case - should never happen
 return &mathQuestions_easy[0]; // Default return
}
